---
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "prowo-ui/ui/card";
import { Badge } from "prowo-ui/ui/badge";
import { buttonVariants } from "prowo-ui/ui/button";
import { cn } from "prowo-ui/lib/utils"
import type { Project } from "../types/projects";

export interface Props {
  username: string;
  displayName: string;
  projectName: string;
  project: Project;
  year: number;
  previewImageUrl?: string;
}

const { 
  username, 
  displayName, 
  projectName, 
  project, 
  year, 
  previewImageUrl,
} = Astro.props;

const projectUrl = `/projekte/${year}/${username}/${projectName}`;
---

<Card className={`group hover:shadow-lg transition-all duration-200`}>
  <CardHeader className={`pb-1`}>
    <div class="flex items-start justify-between">
      <div class="flex-1">
        <CardTitle className={`text-sm mb-1`}>
          {project.name}
        </CardTitle>
        <CardDescription className={`text-xs text-muted-foreground `}>
          von {displayName} • {year}
        </CardDescription>
      </div>
      {project.status && (
        <Badge variant={project.status === 'completed' ? 'default' : 'secondary'} 
               className={`text-xs scale-75`}>
          {project.status}
        </Badge>
      )}
    </div>
  </CardHeader>
  
  <CardContent className={`pb-1`}>
    {previewImageUrl && (
      <div class={`mb-2 rounded-md overflow-hidden bg-muted aspect-[4/3]`}>
        <img 
          src={previewImageUrl} 
          alt={`Preview von ${project.name}`}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
          loading="lazy"
          onerror="this.src='/logo.png'; this.alt='Kein Preview verfügbar'"
        />
      </div>
    )}
    
    {project.description && (
      <p class={`text-xs text-muted-foreground line-clamp-2`}>
        {project.description}
      </p>
    )}
    
    {project.tags && project.tags.length > 0 && (
      <div class={`flex flex-wrap gap-1 mt-1`}>
        {project.tags.slice(0, 2).map((tag) => {
          return (
            <Badge variant="outline" className={`text-xs px-1 py-0`}>
              {tag}
            </Badge>
          );
        })}
        {project.tags.length > 2 && (
          <Badge variant="outline" className="text-xs px-1 py-0">
            +{project.tags.length - 2}
          </Badge>
        )}
      </div>
    )}
  </CardContent>

  <CardFooter className={`pt-1`}>
    <div class={`flex gap-1 w-full flex-col`}>
      <a
        class={cn(buttonVariants({variant: 'default', size: 'sm'}), `flex-1 text-xs px-2 py-1`)}
        href={projectUrl}
        >
          Projekt ansehen
        </a>
      {project.url && (
        <a
          class={cn(buttonVariants({variant: 'outline', size: 'sm'}), `flex-1 text-xs px-2 py-1`)}
          href={project.url} target="_blank" rel="noopener noreferrer"
        >
          <svg class={`w-3 h-3`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
          </svg>
          Extern
          </a>
      )}
    </div>
  </CardFooter>
</Card>