---
import Layout from "~/layouts/Layout.astro";
import ProjectCard from "~/components/ProjectCard.astro";
import { Badge } from "prowo-ui/ui/badge";
import { Button } from "prowo-ui/ui/button";
import { getAllProjectsForYear, getWorkshopYear, getAvailableYears, getActiveYear, getPreviewImageUrl } from "~/lib/projects";

const activeYear = getActiveYear();
const availableYears = getAvailableYears();

const workshopYear = getWorkshopYear(activeYear);
const allProjects = getAllProjectsForYear(activeYear);

// Group projects by participant
const projectsByParticipant = allProjects.reduce((acc, item) => {
  if (!acc[item.username]) {
    acc[item.username] = {
      displayName: item.displayName,
      projects: []
    };
  }
  acc[item.username].projects.push({
    projectName: item.projectName,
    project: item.project
  });
  return acc;
}, {} as Record<string, { displayName: string; projects: Array<{ projectName: string; project: any }> }>);

const workshopMeta = workshopYear?.['!'];
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    <!-- Year Navigation - Top -->
    <div class="mb-8">
      <div class="text-center mb-6">
        <h1 class="ledger-regular text-4xl md:text-6xl font-bold mb-4">
          Projektwoche Projekte
        </h1>
        <p class="text-xl md:text-2xl text-muted-foreground mb-6">
          Entdecke die kreativen Projekte unserer Schüler aus den verschiedenen Projektwochen
        </p>
      </div>
      
      <!-- Year Selection -->
      <div class="flex justify-center mb-8">
        <div class="flex items-center gap-2 p-1 bg-muted rounded-lg">
          <span class="text-sm text-muted-foreground mx-2">Jahr:</span>
          {availableYears.map((year) => (
            <Button
              variant={year === activeYear ? "default" : "ghost"}
              size="sm"
              onclick={year === activeYear ? undefined : `window.location.href='/projekte/${year}'`}
            >
              {year}
            </Button>
          ))}
        </div>
      </div>
    </div>

    <!-- Current Year Header -->
    <div class="mb-8 text-center">
      <div class="flex items-center justify-center gap-4 mb-4">
        <h2 class="text-2xl md:text-3xl font-bold">
          Projektwoche {activeYear}
        </h2>
        <Badge variant="default">Aktuell</Badge>
      </div>
      {workshopMeta && (
        <p class="text-lg text-muted-foreground mb-4">
          {workshopMeta.displayName}
        </p>
      )}
      <div class="flex items-center justify-center gap-4 text-sm text-muted-foreground">
        <span>{allProjects.length} Projekte</span>
        <span>{Object.keys(projectsByParticipant).length} Teilnehmer</span>
      </div>
    </div>

    {allProjects.length === 0 ? (
      <div class="text-center py-12">
        <h2 class="text-xl font-semibold mb-2">Noch keine Projekte</h2>
        <p class="text-muted-foreground">
          Für das Jahr {activeYear} wurden noch keine Projekte hochgeladen.
        </p>
      </div>
    ) : (
      <>
        {/* Projects grouped by participant */}
        <div class="space-y-12">
          {Object.entries(projectsByParticipant).map(([username, participantData]) => {
            return (
              <section key={username}>
                <div class="flex items-center justify-between mb-6">
                  <div>
                    <h3 class="text-2xl font-semibold mb-1">
                      {participantData.displayName}
                    </h3>
                    <p class="text-muted-foreground">
                      @{username} • {participantData.projects.length} {participantData.projects.length === 1 ? 'Projekt' : 'Projekte'}
                    </p>
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onclick={`window.location.href='/projekte/${activeYear}/${username}'`}
                  >
                    Alle von {participantData.displayName}
                  </Button>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3">
                  {participantData.projects.map(({ projectName, project }) => (
                    <ProjectCard
                      key={`${username}-${projectName}`}
                      username={username}
                      displayName={participantData.displayName}
                      projectName={projectName}
                      project={project}
                      year={activeYear}
                      previewImageUrl={getPreviewImageUrl(activeYear, username, projectName)}
                      size="compact"
                    />
                  ))}
                </div>
              </section>
            );
          })}
        </div>
      </>
    )}

    <!-- Year Navigation - Bottom -->
    <div class="mt-12 pt-8 border-t border-border">
      <div class="flex justify-center">
        <div class="flex items-center gap-2 p-1 bg-muted rounded-lg">
          <span class="text-sm text-muted-foreground mx-2">Andere Jahre:</span>
          {availableYears.filter(year => year !== activeYear).map((year) => (
            <Button
              variant="ghost"
              size="sm"
              onclick={`window.location.href='/projekte/${year}'`}
            >
              {year}
            </Button>
          ))}
        </div>
      </div>
    </div>
  </div>
</Layout>