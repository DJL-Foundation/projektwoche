# escape=`

FROM mcr.microsoft.com/windows/servercore:ltsc2025-amd64

# Set PowerShell as the default shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install winget
RUN Add-AppxPackage -RegisterByFamilyName -MainPackage Microsoft.DesktopInstaller_8wekyb3d8bbwe

# Install Git via winget
RUN winget install --id Git.Git -e --source winget --accept-package-agreements --accept-source-agreements

# Install Visual Studio Build Tools via winget
RUN winget install --id Microsoft.VisualStudio.2022.BuildTools -e --source winget --accept-package-agreements --accept-source-agreements


# Install Rust
RUN Invoke-WebRequest -Uri 'https://win.rustup.rs/x86_64' -OutFile 'rustup-init.exe'; `
    .\rustup-init.exe -y; `
    Remove-Item .\rustup-init.exe

# Add Rust to PATH
RUN [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';C:\Users\ContainerAdministrator\.cargo\bin', [EnvironmentVariableTarget]::Machine)

# Install Bun
RUN powershell -c "irm bun.sh/install.ps1 | iex"

# Set up working directory
WORKDIR C:\app

# Copy project files
COPY . .

# Build the projektwoche-setup tool
RUN cargo build --release --manifest-path rust/projektwoche-setup/Cargo.toml

# Add the binary to PATH
ENV PATH="C:\app\target\release;${PATH}"

# Set the default command to run installation and verification
CMD ["powershell", "-Command", "projektwoche-setup.exe install projektwoche; if ($LASTEXITCODE -eq 0) { bun scripts/setup-tests.ts projektwoche } else { exit $LASTEXITCODE }"]