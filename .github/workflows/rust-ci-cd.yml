name: 🚀 Cross-Platform Rust Continuous Integration and Deployment

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/rust-ci-cd.yml"
      - "rust/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "rustfmt.toml"
  pull_request:
    paths:
      - ".github/workflows/rust-ci-cd.yml"
      - "rust/**"
      - "Cargo.lock"
      - "Cargo.toml"
      - "rustfmt.toml"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build all Rust projects
  build:
    name: 🔧 Build ${{ matrix.project_name }} for ${{ matrix.target }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
        project_name:
          - "projektwoche-setup"
          - "ratatui-test-json"
        include:
          - target: x86_64-pc-windows-gnu
            runs-on: blacksmith-8vcpu-ubuntu-2404
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-unknown-linux-gnu
            runs-on: blacksmith-4vcpu-ubuntu-2404
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-pc-windows-gnu
            runs-on: blacksmith-8vcpu-ubuntu-2404
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
          - target: x86_64-unknown-linux-gnu
            runs-on: blacksmith-4vcpu-ubuntu-2404
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
          - target: x86_64-apple-darwin
            runs-on: macos-latest
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-apple-darwin
            runs-on: macos-latest
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
    steps:
      - uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 🔧 Install cross-compilation dependencies
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: 💾 Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.project_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: ⚡ Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.project_binary }}

      - name: 📦 Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project_name }}-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/${{ matrix.project_binary }}*
          retention-days: 7

  # Run cargo tests for all projects except projektwoche-setup
  test:
    name: 🧪 Unit Tests for ${{ matrix.project_name }}
    runs-on: blacksmith-8vcpu-ubuntu-2404
    strategy:
      matrix:
        project_name:
          - "ratatui-test-json"
        include:
          - project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
    steps:
      - uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 💾 Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-test-${{ matrix.project_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧪 Run tests
        run: |
          cargo test --bin ${{ matrix.project_name }}

  test-prowo-interaction:
    name: ${{ matrix.os-icon }} [PROWO] ${{ matrix.os }} Interaction Test
    needs: build
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows
            os-icon: 🪟
            runs-on: windows-latest
            target: x86_64-pc-windows-gnu
            binary-name: projektwoche-setup.exe
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
          - os: linux
            os-icon: 🐧
            runs-on: blacksmith-4vcpu-ubuntu-2404
            target: x86_64-unknown-linux-gnu
            binary-name: projektwoche-setup
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
          - os: macos
            os-icon: 🍎
            runs-on: macos-latest
            target: x86_64-apple-darwin
            binary-name: projektwoche-setup
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download binary
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-${{ matrix.target }}
          path: ./bin

      - name: ⚙️ Make binary executable and move ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: Move-Item "./bin/${{ matrix.binary-name }}" "./${{ matrix.binary-name }}" -Force
        shell: powershell

      - name: ⚙️ Make binary executable and move ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          chmod +x ./bin/${{ matrix.binary-name }}
          mv ./bin/${{ matrix.binary-name }} ./${{ matrix.binary-name }}
        shell: bash

      - name: 🔍 Test dry-run installation ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: |
          Write-Host "Testing dry-run installation..."
          ./${{ matrix.binary-name }} install -d projektwoche > dry-install-log.txt 2>&1
          Get-Content dry-install-log.txt
        shell: powershell

      - name: 🔍 Test dry-run installation ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          echo "Testing dry-run installation..."
          ./${{ matrix.binary-name }} install -d projektwoche > dry-install-log.txt 2>&1
          cat dry-install-log.txt
        shell: bash

      - name: 📋 Check for installation keywords
        if: always()
        run: |
          ./scripts/check_keywords.sh dry-install-log.txt '${{ toJson(fromJSON(matrix.install-keywords)) }}'
        shell: bash

      - name: 🗑️ Test dry-run uninstallation ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: |
          Write-Host "Testing dry-run uninstallation..."
          ./${{ matrix.binary-name }} uninstall -d projektwoche > dry-uninstall-log.txt 2>&1
          Get-Content dry-uninstall-log.txt
        shell: powershell
        continue-on-error: true

      - name: 🗑️ Test dry-run uninstallation ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          echo "Testing dry-run uninstallation..."
          ./${{ matrix.binary-name }} uninstall -d projektwoche > dry-uninstall-log.txt 2>&1
          cat dry-uninstall-log.txt
        shell: bash
        continue-on-error: true

      - name: 📋 Check for deinstallation keywords
        if: always()
        run: |
          ./scripts/check_keywords.sh dry-uninstall-log.txt '${{ toJson(fromJSON(matrix.uninstall-keywords)) }}'
        shell: bash
        continue-on-error: true

      - name: 📁 Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-interaction-logs
          path: |
            dry-install-log.txt
            dry-uninstall-log.txt
          retention-days: 7

  test-prowo-edge-cases:
    name: 🔍 [PROWO] Edge Case Testing
    needs: test-prowo-interaction
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-x86_64-unknown-linux-gnu
          path: ./bin

      - name: ⚙️ Make binary executable
        run: |
          chmod +x ./bin/projektwoche-setup
          mv ./bin/projektwoche-setup ./projektwoche-setup

      - name: ❌ Test invalid bundle names
        run: |
          echo "Testing invalid bundle handling..."
          ./projektwoche-setup install -d nonexistent-bundle > invalid-bundle-log.txt 2>&1
          cat invalid-bundle-log.txt
        shell: bash
        continue-on-error: true

      - name: ❓ Test help command
        run: |
          echo "Testing help command..."
          ./projektwoche-setup --help > help-log.txt 2>&1
          cat help-log.txt
        shell: bash

      - name: 📋 Test version command
        run: |
          echo "Testing version command..."
          ./projektwoche-setup --version > version-log.txt 2>&1
          cat version-log.txt
        shell: bash
        continue-on-error: true

      - name: 📁 Upload edge case logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: edge-case-logs
          path: |
            invalid-bundle-log.txt
            help-log.txt
            version-log.txt
          retention-days: 7

  test-performance:
    name: 🚄 Performance Testing
    needs: build
    runs-on: blacksmith-4vcpu-ubuntu-2404
    strategy:
      matrix:
        project_name:
          - "projektwoche-setup"
          - "ratatui-test-json"
        include:
          - project_name: projektwoche-setup
            custom_args: "install -d projektwoche"
          - project_name: ratatui-test-json
            custom_args: ""
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project_name}}-x86_64-unknown-linux-gnu
          path: ./bin
      - name: ⚙️ Make binary executable
        run: |
          chmod +x ./bin/${{ matrix.project_name }}
          mv ./bin/${{ matrix.project_name }} ./${{ matrix.project_name }}

      - name: ⚡ Test performance
        run: |
          time ./${{ matrix.project_name }} ${{ matrix.custom_args }} > ${{matrix.project_name}}-performance-log.txt 2>&1
          cat ${{matrix.project_name}}-performance-log.txt
      - name: 🧠 Test memory usage during dry-run
        run: |
          /usr/bin/time -v ./${{ matrix.project_name }} ${{ matrix.custom_args }} > ${{matrix.project_name}}-memory-usage-log.txt 2>&1
          cat ${{matrix.project_name}}-memory-usage-log.txt
      - name: 📁 Upload performance logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project_name }}-performance-logs
          path: |
            ${{matrix.project_name}}-performance-log.txt
            ${{matrix.project_name}}-memory-usage-log.txt
          retention-days: 7

  summary:
    name: 📊 General Summary
    needs:
      [
        build,
        test,
        test-prowo-interaction,
        test-prowo-edge-cases,
        test-performance,
      ]
    runs-on: blacksmith-2vcpu-ubuntu-2404
    if: always()
    steps:
      - name: 📈 Create test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### General Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.test-performance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Projektwoche-Setup specific" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Interaction Tests | ${{ needs.test-prowo-interaction.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Edge Cases | ${{ needs.test-prowo-edge-cases.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.test-prowo-interaction.result }}" == "success" && "${{ needs.test-prowo-edge-cases.result }}" == "success" && "${{ needs.test-performance.result }}" == "success" ]]; then
            echo "✅ All tests successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the logs of individual jobs for details." >> $GITHUB_STEP_SUMMARY
          fi
