name: 🚀 Cross-Platform Rust Continuous Integration and Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  allow-run:
    name: 🦀 Rust Continious Integration needed?
    runs-on: blacksmith-2vcpu-ubuntu-2404
    outputs:
      RUN_CI: ${{ steps.check-ci.outputs.RUN_CI || steps.manual-trigger.outputs.RUN_CI }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ▶ Allow Workflow Run
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: manual-trigger
        run: |
          echo "This workflow was triggered manually."
          echo "run_ci=true" >> $GITHUB_ENV
          echo "RUN_CI=true" >> "$GITHUB_OUTPUT"

      - name: 🔎 Check if CI/CD is needed
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
        id: check-ci
        run: |
          echo "Checking if CI/CD is needed..."

          # Determine the base and head SHAs for comparison
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For push events, compare with the previous commit
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.event.after }}"
          fi

          echo "Comparing changes between $BASE_SHA and $HEAD_SHA"

          # Get the list of changed files
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" || echo "")

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if any Rust-related files were modified
          if echo "$CHANGED_FILES" | grep -qE '\.github/workflows/rust-ci-cd\.yml|rust/|Cargo\.lock|Cargo\.toml|rustfmt\.toml'; then
            echo "CI/CD is needed."
            echo "RUN_CI=true" >> $GITHUB_OUTPUT
          else
            echo "CI/CD is not needed."
            echo "RUN_CI=false" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Run Rust CI/CD
        if: steps.check-ci.outputs.RUN_CI == 'true' || steps.manual-trigger.outputs.RUN_CI == 'true'
        run: |
          echo "CI is needed, proceeding with the workflow."
          echo "### ✅ CI criteria met" >> $GITHUB_STEP_SUMMARY
          echo "The CI Jobs will be executed in the next available runners." >> $GITHUB_STEP_SUMMARY

      - name: ⏭ Skip Rust CI
        if: steps.check-ci.outputs.RUN_CI == 'false' && steps.manual-trigger.outputs.RUN_CI != 'true'
        run: |
          echo "CI/CD is not needed, skipping the workflow."
          echo "### ❌ CI/CD criteria not met" >> $GITHUB_STEP_SUMMARY
          echo "The CI/CD Jobs will not run as the criteria are not met." >> $GITHUB_STEP_SUMMARY
          echo "This workflow was triggered by a commit that does not affect Rust code or configuration files." >> $GITHUB_STEP_SUMMARY
          echo "If you want to run the CI/CD, please modify a Rust file or the workflow configuration." >> $GITHUB_STEP_SUMMARY
          echo "You can also force a run by clicking the 'Run workflow' button in the Actions tab." >> $GITHUB_STEP_SUMMARY
          exit 0

  allow-deploy:
    name: 🦀 Rust Deployment allowed?
    runs-on: blacksmith-2vcpu-ubuntu-2404
    needs: allow-run
    if: needs.allow-run.outputs.RUN_CI == 'true'
    outputs:
      RUN_DEPLOY: ${{ steps.assess-deployment.outputs.RUN_DEPLOY }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔎 Check Workflow Executor
        id: check-executor
        run: |
          echo "Checking if the workflow is triggered by a push event..."
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "EXECUTOR_CHECK=true" >> $GITHUB_OUTPUT
          else
            echo "EXECUTOR_CHECK=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔎 Check version increment
        id: check-increment
        run: |
          echo "Checking if the version in rust/projektwoche-setup/Cargo.toml has been incremented..."
          current_version=$(grep '^version' rust/projektwoche-setup/Cargo.toml | head -n 1 | awk -F\" '{print $2}')
          previous_version=$(git show HEAD~1:rust/projektwoche-setup/Cargo.toml | grep '^version' | head -n 1 | awk -F\" '{print $2}')
          echo "Current version: $current_version"
          echo "Previous version: $previous_version"
          if [[ "$current_version" != "$previous_version" ]]; then
            echo "INCREMENT_CHECK=true" >> $GITHUB_OUTPUT
          else
            echo "INCREMENT_CHECK=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔎 Assess Deployment Readiness
        id: assess-deployment
        run: |
          if [[ ${{ steps.check-executor.outputs.EXECUTOR_CHECK }} == 'true' && ${{ steps.check-increment.outputs.INCREMENT_CHECK }} == 'true' ]]; then
            echo "Deployment is ready."
            echo "RUN_DEPLOY=true" >> $GITHUB_OUTPUT
          else
            echo "Deployment is not ready."
            echo "RUN_DEPLOY=false" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Allow Deployment
        if: steps.assess-deployment.outputs.RUN_DEPLOY == 'true'
        run: |
          echo "Deployment is allowed, proceeding with the deployment workflow."
          echo "### ✅ Deployment criteria met" >> $GITHUB_STEP_SUMMARY
          echo "The Deployment Job will be picked up by the next runner if all tests pass." >> $GITHUB_STEP_SUMMARY

      - name: ⏭ Skip Deployment
        if: steps.assess-deployment.outputs.RUN_DEPLOY == 'false'
        run: |
          echo "Deployment is not allowed, skipping the deployment workflow."
          echo "### ❌ Deployment criteria not met" >> $GITHUB_STEP_SUMMARY
          echo "The Deployment Job will not run as the criteria are not met." >> $GITHUB_STEP_SUMMARY
          echo "This workflow was triggered by a commit that does not affect Rust code or configuration files, or the version in Cargo.toml has not been incremented." >> $GITHUB_STEP_SUMMARY
          echo "If you want to run the deployment, please modify a Rust file or the workflow configuration, and ensure the version in Cargo.toml is incremented." >> $GITHUB_STEP_SUMMARY
          exit 0

  # Build all Rust projects
  build:
    needs: allow-run
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
        project_name:
          - "projektwoche-setup"
          - "ratatui-test-json"
        include:
          - target: x86_64-pc-windows-gnu
            runs-on: blacksmith-8vcpu-ubuntu-2404
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-unknown-linux-gnu
            runs-on: blacksmith-4vcpu-ubuntu-2404
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-pc-windows-gnu
            runs-on: blacksmith-8vcpu-ubuntu-2404
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
          - target: x86_64-unknown-linux-gnu
            runs-on: blacksmith-4vcpu-ubuntu-2404
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
          - target: x86_64-apple-darwin
            runs-on: macos-latest
            project_name: "projektwoche-setup"
            project_path: "rust/projektwoche-setup"
            project_binary: "projektwoche-setup"
          - target: x86_64-apple-darwin
            runs-on: macos-latest
            project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
            project_binary: "ratatui-test-json"
    steps:
      - uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: 💾 Cache cross-compilation dependencies
        uses: actions/cache@v4
        with:
          path: ~/apt-cache
          key: ${{ runner.os }}-gcc-mingw
          restore-keys: |
            ${{ runner.os }}-gcc-mingw

      - name: 🔧 Install cross-compilation dependencies
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          # Create cache directory
          mkdir -p ~/apt-cache
          # Configure apt to use our cache directory
          sudo mkdir -p /etc/apt/apt.conf.d
          echo "Dir::Cache::Archives \"$HOME/apt-cache\";" | sudo tee /etc/apt/apt.conf.d/99cache-dir
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: 💾 Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ matrix.project_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: ⚡ Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.project_binary }}

      - name: 📦 Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project_name }}-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/${{ matrix.project_binary }}*
          retention-days: 7

  # Run cargo tests for all projects except projektwoche-setup
  test:
    name: 🧪 Unit Tests for ${{ matrix.project_name }}
    needs: allow-run
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: blacksmith-8vcpu-ubuntu-2404
    strategy:
      matrix:
        project_name:
          - "ratatui-test-json"
        include:
          - project_name: "ratatui-test-json"
            project_path: "rust/ratatui-test-json"
    steps:
      - uses: actions/checkout@v4

      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: 💾 Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust/target
          key: ${{ runner.os }}-cargo-test-${{ matrix.project_name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: 🧪 Run tests
        run: |
          cargo test --bin ${{ matrix.project_name }}

  test-prowo-interaction:
    name: ${{ matrix.os-icon }} [PROWO] ${{ matrix.os }} Interaction Test
    needs:
      - build
      - allow-run
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows
            os-icon: 🪟
            runs-on: windows-latest
            target: x86_64-pc-windows-gnu
            binary-name: projektwoche-setup.exe
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
          - os: linux
            os-icon: 🐧
            runs-on: blacksmith-4vcpu-ubuntu-2404
            target: x86_64-unknown-linux-gnu
            binary-name: projektwoche-setup
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
          - os: macos
            os-icon: 🍎
            runs-on: macos-latest
            target: x86_64-apple-darwin
            binary-name: projektwoche-setup
            install-keywords: |
              ["Installing program: Node.js", "Installing program: Bun", "Installing program: Visual Studio Code", "Installation abgeschlossen"]
            uninstall-keywords: |
              ["Uninstalling program: Node.js", "Uninstalling program: Bun", "Uninstalling program: Visual Studio Code", "Deinstallation abgeschlossen"]
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download binary
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-${{ matrix.target }}
          path: ./bin

      - name: ⚙️ Make binary executable and move ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: Move-Item "./bin/${{ matrix.binary-name }}" "./${{ matrix.binary-name }}" -Force
        shell: powershell

      - name: ⚙️ Make binary executable and move ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          chmod +x ./bin/${{ matrix.binary-name }}
          mv ./bin/${{ matrix.binary-name }} ./${{ matrix.binary-name }}
        shell: bash

      - name: 🔍 Test dry-run installation ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: |
          Write-Host "Testing dry-run installation..."
          ./${{ matrix.binary-name }} install -d projektwoche > dry-install-log.txt 2>&1
          Get-Content dry-install-log.txt
        shell: powershell

      - name: 🔍 Test dry-run installation ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          echo "Testing dry-run installation..."
          ./${{ matrix.binary-name }} install -d projektwoche > dry-install-log.txt 2>&1
          cat dry-install-log.txt
        shell: bash

      - name: 📋 Check for installation keywords
        if: always()
        run: |
          ./scripts/check_keywords.sh dry-install-log.txt '${{ toJson(fromJSON(matrix.install-keywords)) }}'
        shell: bash

      - name: 🗑️ Test dry-run uninstallation ${{ matrix.os-icon }}
        if: matrix.os == 'windows'
        run: |
          Write-Host "Testing dry-run uninstallation..."
          ./${{ matrix.binary-name }} uninstall -d projektwoche > dry-uninstall-log.txt 2>&1
          Get-Content dry-uninstall-log.txt
        shell: powershell
        continue-on-error: true

      - name: 🗑️ Test dry-run uninstallation ${{ matrix.os-icon }}
        if: matrix.os == 'linux' || matrix.os == 'macos'
        run: |
          echo "Testing dry-run uninstallation..."
          ./${{ matrix.binary-name }} uninstall -d projektwoche > dry-uninstall-log.txt 2>&1
          cat dry-uninstall-log.txt
        shell: bash
        continue-on-error: true

      - name: 📋 Check for deinstallation keywords
        if: always()
        run: |
          ./scripts/check_keywords.sh dry-uninstall-log.txt '${{ toJson(fromJSON(matrix.uninstall-keywords)) }}'
        shell: bash
        continue-on-error: true

      - name: 📁 Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-interaction-logs
          path: |
            dry-install-log.txt
            dry-uninstall-log.txt
          retention-days: 7

  test-prowo-edge-cases:
    name: 🔍 [PROWO] Edge Case Testing
    needs:
      - allow-run
      - test-prowo-interaction
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: blacksmith-4vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-x86_64-unknown-linux-gnu
          path: ./bin

      - name: ⚙️ Make binary executable
        run: |
          chmod +x ./bin/projektwoche-setup
          mv ./bin/projektwoche-setup ./projektwoche-setup

      - name: ❌ Test invalid bundle names
        run: |
          echo "Testing invalid bundle handling..."
          ./projektwoche-setup install -d nonexistent-bundle > invalid-bundle-log.txt 2>&1
          cat invalid-bundle-log.txt
        shell: bash
        continue-on-error: true

      - name: ❓ Test help command
        run: |
          echo "Testing help command..."
          ./projektwoche-setup --help > help-log.txt 2>&1
          cat help-log.txt
        shell: bash

      - name: 📋 Test version command
        run: |
          echo "Testing version command..."
          ./projektwoche-setup --version > version-log.txt 2>&1
          cat version-log.txt
        shell: bash
        continue-on-error: true

      - name: 📁 Upload edge case logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: edge-case-logs
          path: |
            invalid-bundle-log.txt
            help-log.txt
            version-log.txt
          retention-days: 7

  test-performance:
    name: 🚄 Performance Testing
    needs:
      - allow-run
      - build
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: blacksmith-4vcpu-ubuntu-2404
    strategy:
      matrix:
        project_name:
          - "projektwoche-setup"
          - "ratatui-test-json"
        include:
          - project_name: projektwoche-setup
            custom_args: "install -d projektwoche"
          - project_name: ratatui-test-json
            custom_args: ""
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.project_name}}-x86_64-unknown-linux-gnu
          path: ./bin
      - name: ⚙️ Make binary executable
        run: |
          chmod +x ./bin/${{ matrix.project_name }}
          mv ./bin/${{ matrix.project_name }} ./${{ matrix.project_name }}

      - name: ⚡ Test performance
        run: |
          time ./${{ matrix.project_name }} ${{ matrix.custom_args }} > ${{ matrix.project_name }}-performance-log.txt 2>&1
          cat ${{ matrix.project_name }}-performance-log.txt
      - name: 🧠 Test memory usage during dry-run
        run: |
          /usr/bin/time -v ./${{ matrix.project_name }} ${{ matrix.custom_args }} > ${{ matrix.project_name }}-memory-usage-log.txt 2>&1
          cat ${{ matrix.project_name }}-memory-usage-log.txt
      - name: 📁 Upload performance logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.project_name }}-performance-logs
          path: |
            ${{ matrix.project_name }}-performance-log.txt
            ${{ matrix.project_name }}-memory-usage-log.txt
          retention-days: 7

  test-prowo-docker:
    name: 🐳 [PROWO] ${{ matrix.platform }} Docker Test
    needs:
      - allow-run
      - build
      - test-prowo-interaction
    if: needs.allow-run.outputs.RUN_CI == 'true'
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu
          - windows
        include:
          - platform: ubuntu
            runs-on: blacksmith-4vcpu-ubuntu-2404
            dockerfile: tests/Dockerfile.ubuntu
            image_name: projektwoche-ubuntu-test
          - platform: windows
            runs-on: blacksmith-4vcpu-ubuntu-2404
            dockerfile: tests/Dockerfile.windows
            image_name: projektwoche-windows-test
    steps:
      - uses: actions/checkout@v4

      - name: 💾 Cache cross-compilation dependencies for Windows
        if: matrix.platform == 'windows'
        uses: actions/cache@v4
        with:
          path: ~/apt-cache
          key: ${{ runner.os }}-gcc-mingw-docker
          restore-keys: |
            ${{ runner.os }}-gcc-mingw-docker

      - name: 🔧 Install cross-compilation dependencies for Windows
        if: matrix.platform == 'windows'
        run: |
          # Create cache directory
          mkdir -p ~/apt-cache
          # Configure apt to use our cache directory
          sudo mkdir -p /etc/apt/apt.conf.d
          echo "Dir::Cache::Archives \"$HOME/apt-cache\";" | sudo tee /etc/apt/apt.conf.d/99cache-dir
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64

      - name: 🐳 Build Docker image for ${{ matrix.platform }}
        shell: bash
        run: |
          docker build -f ${{ matrix.dockerfile }} -t ${{ matrix.image_name }} .

      - name: 🚀 Run Docker container and capture exit code for ${{ matrix.platform }}
        shell: bash
        run: |
          echo "Running Docker container for ${{ matrix.platform }}..."
          set +e
          docker run --rm ${{ matrix.image_name }}
          exit_code=$?
          echo "Container exited with code: $exit_code"
          if [ $exit_code -ne 0 ]; then
            echo "❌ Docker test failed for ${{ matrix.platform }} with exit code $exit_code"
            exit $exit_code
          else
            echo "✅ Docker test passed for ${{ matrix.platform }}"
          fi

  deploy:
    name: 🚀 Rust Deployment
    needs:
      - allow-deploy
      - build
      - test
      - test-prowo-interaction
      - test-prowo-edge-cases
      - test-performance
      - test-prowo-docker
    if: needs.allow-deploy.outputs.RUN_DEPLOY == 'true'
    runs-on: blacksmith-2vcpu-ubuntu-2404
    permissions:
      contents: write
    outputs:
      release_url: ${{ steps.create-release.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-x86_64-unknown-linux-gnu
          path: ./bin

      - name: 📥 Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-x86_64-pc-windows-gnu
          path: ./bin

      - name: 📥 Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: projektwoche-setup-x86_64-apple-darwin
          path: ./bin

      - name: 📋 Extract version from Cargo.toml
        id: extract-version
        run: |
          VERSION=$(grep '^version' rust/projektwoche-setup/Cargo.toml | head -n 1 | awk -F\" '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: 📦 Create Release
        uses: softprops/action-gh-release@v2
        id: create-release
        with:
          tag_name: "projektwoche-setup-v${{ steps.extract-version.outputs.VERSION }}"
          name: "Projektwoche Setup v${{ steps.extract-version.outputs.VERSION }}"
          body: |
            ## Release Notes
            - This release includes the latest version of the Projektwoche Setup tool.
            - Binaries for Linux, Windows, and macOS are included.
          files: |
            ./bin/projektwoche-setup-x86_64-unknown-linux-gnu/projektwoche-setup
            ./bin/projektwoche-setup-x86_64-pc-windows-gnu/projektwoche-setup.exe
            ./bin/projektwoche-setup-x86_64-apple-darwin/projektwoche-setup
          draft: true
          prerelease: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: 📊 General Summary
    needs:
      - allow-run
      - build
      - test
      - test-prowo-interaction
      - test-prowo-edge-cases
      - test-performance
      - test-prowo-docker
    runs-on: blacksmith-2vcpu-ubuntu-2404
    if: always()
    steps:
      - name: 📈 Create CI summary
        if: needs.allow-run.outputs.RUN_CI == 'true'
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### General Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Unit Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.test-performance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Projektwoche-Setup specific" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Interaction Tests | ${{ needs.test-prowo-interaction.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Edge Cases | ${{ needs.test-prowo-edge-cases.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Tests | ${{ needs.test-prowo-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.test-prowo-interaction.result }}" == "success" && "${{ needs.test-prowo-edge-cases.result }}" == "success" && "${{ needs.test-performance.result }}" == "success" && "${{ needs.test-prowo-docker.result }}" == "success" ]]; then
            echo "✅ All tests successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the logs of individual jobs for details." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🕵🏻‍♂️ Debug Message for skipped run
        if: needs.allow-run.outputs.RUN_CI == 'false'
        run: |
          echo "## Skipped CI/CD Run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reason for Skipping" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This workflow was triggered by a commit that does not affect Rust code or configuration files." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### How to Force a Run" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To force a run, you can trigger this workflow manually using the 'Run workflow' button in the Actions tab." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "If you see this message, it means the workflow was skipped as expected." >> $GITHUB_STEP_SUMMARY
          echo "You can safely ignore this message if you did not intend to run the workflow." >> $GITHUB_STEP_SUMMARY

  release-summary:
    name: 📦 Release Summary
    needs:
      - deploy
      - allow-deploy
    if: always() && needs.allow-deploy.outputs.RUN_DEPLOY == 'true'
    runs-on: blacksmith-2vcpu-ubuntu-2404
    steps:
      # in table format again
      - name: 📦 Create Release Summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment successful!" >> $GITHUB_STEP_SUMMARY
          echo "### Job Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release has been created successfully. You can find the release at: [Release URL](${{ needs.deploy.outputs.release_url }})" >> $GITHUB_STEP_SUMMARY
